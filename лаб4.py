import re


def check_nested_lookaheads(regex): # проверка на наличие опережающей проверки, внутри опережающей проверки! 
    stack = []
    i = 0
    while i < len(regex):
        if regex[i:i+3] == '(?=': # начало опережающей проверки
            stack.append('(?=')
            i += 3
        elif regex[i] == '(':
            stack.append('(')
            i += 1
        elif regex[i] == ')':
            if stack:
                last = stack.pop() # закрытие опережающей проверки
                if last == '(?=':  # проверка, что внутри нет другой опережающей проверки
                    if '(?=' in stack:
                        print("Нарушение: вложенные опережающие проверки!")
                        return(0)
            i += 1
        else:
            i += 1
    return(1)


def check_groups_in_lookaheads(regex): # проверяем отсутствие захваченных групп внутри опережающих проверок
    stack = []
    i = 0
    while i < len(regex):
        if regex[i:i+3] == '(?=':  # начало опережающей проверки
            stack.append(i)  # индекс начала опережающей проверки
            i += 3
        elif regex[i] == '(':
            stack.append(i)  # индекс начала группы
            i += 1
        elif regex[i] == ')':
            if stack:
                last_index = stack.pop()  # последний индекс
                if regex[last_index:last_index+3] == '(?=':  # проверяем, была ли это опережающая проверка
                    # вытаскиваем часть строки внутри опережающей проверки
                    inner_part = regex[last_index + 3:i]
                    # проверка наличия захваченных групп внутри
                    if re.search(r'\([^?]', inner_part):
                        print("Нарушение: захваченные группы внутри опережающих проверок!")
                        return False
            i += 1
        else:
            i += 1
    return True


def counter(s): # работа со скобками
    open_count = s.count('(')
    close_count = s.count(')')
    if open_count == close_count:
        return (open_count)
    else:
        return(0)


def chec_regex (regex):
    # очевидные ошибки и недоработки! например случайные двойные || - палочки и прочие радости опечаток (случайных конечно!) будут в этом блоке:    
    # Проверка на двойные или более '||' (многократные вертикальные черты)
    if re.search(r'\|{2,}', regex):
        print("Ошибка: Что-то не так с палочками '||', возможно их две... или даже больше.")
        return 0       

    # проверка на вертикальную черту в начале или в конце
    if regex.startswith('|') or regex.endswith('|'):
        print("Ошибка: Палочка находится '|' в начале или в конце.")
        return 0

    # проверка на использование символов, которые не могут стоять после оператора '|'
    if re.search(r'\|\*', regex):
        print("Ошибка: А что забыла '*' после '|'?")
        return 0
    
    # Проверка на некорректные ссылки на группы (например, (?1) без контекста) требуется доработка!
    all_groups = regex.count('(') - regex.count('(?')  # Подсчёт захватывающих групп
    references = re.findall(r'\(\?(\d+)\)', regex)  # Поиск ссылок на группы
    for ref in references:
        if int(ref) > all_groups:
            print("Ошибка: Не существует группы указанного индекса.")
            return 0
        
    # проверка на избыточные скобки, например, ((a))
    if re.search(r'\(\(.*\)\)', regex):
        print("Ошибка: Слишком много скобок, например '((a))'.")
        return 0
    
    skobki = counter(regex)
    if skobki == 0:  # где-то проблемы со скобками :(
        print("где-то проблемы со скобками!")
        return (0)
    
    elif skobki > 9: # нарушение первого правила! не более девяти скобок
        print("Нарушение первого правила, не более девяти скобок!")
        return (0)
    
    if not check_nested_lookaheads(regex):  # проверка на наличие опережающей проверки, внутри опережающей проверки! 
        return 0
    
    if not check_groups_in_lookaheads(regex):  # проверяем отсутствие захваченных групп внутри опережающих проверок
        return 0
    return(1)

#regex = input()
#print (regex)
#print(chec_regex(regex))


# вариант 5
# правила для проверки:
# не более 9 () круглых скобок! в выражении 
# нет опережающих проверок в опережающих проверках  
# внутри опережающих проверок не допускаются захваченные группы (круглые скобки)
"""
# тестовые примеры
test_regex = [
    "(a|(?=b))",  # корректное выражение
    "(a(?=b(?=c)))",  # вложенные опережающие проверки
    "(?=(a(b)))",  # захваченные группы внутри опережающих проверок
    "(a|b)(c|d)",  # корректное выражение
    "(a|b)(c|d)(e|f)(g|h)(i|j)(k|l)(m|n)(o|p)(q|r)(s|t)",  # превышение лимита скобок
]

for regex in test_regex:
    print(f"Проверка: {regex}")
    result = chec_regex(regex)
    print(f"Результат: {'Всё хорошо!' if result else 'Что-то пошло не так!'}\n")
"""
# тестирование на опечатки, и другие проблемные места 
test_regex = [
    "(a||b)", # нет
    "|b", # нет
    "a|*", # нет
    "((a))", # нет
    "(?1)", # нет
    "(?1)(a|b)", # можно
    "(?1)(a|b)*(?1)", # можно
    "(a(?1)b|c)" # можно 

]

for regex in test_regex:
    print(f"Проверка: {regex}")
    result = chec_regex(regex)
    print(f"Результат: {'Всё хорошо!' if result else 'Что-то пошло не так!'}\n")
